
# append this file to /etc/bash.bashrc
# test with source ./global_functions



# declare global kiosk functions

# Usage:
# exit_if_disabled [service]
exit_if_disabled() {
  read -r SWITCH <"/opt/kiosk/services/$1"  
  test "$SWITCH" = 'enabled' || exit # FIXME: add message if disabled
}

# Usage:
# kiosklog [service] [message]
kiosklog() {
  logger -- "$0: $*"
  echo "$( date ): $0: $*" >>"/opt/kiosk/logs/kiosk.log" 
  echo "$( date ): $0: $2" >>"/opt/kiosk/logs/$1.log" 
}

# Usage: 
# kioskctl enable chromium-browser
kioskctl(){
  echo "service $2 is $1d"
  echo "$1d" > "/opt/kiosk/services/$2"
  echo "currently $( print_mount_status ) mounted"
  kiosklog "kiosk" "service $2 is $1d now"
}


kioskstatus(){
	printf "\n===  RO / RW  ===\n\n"
	echo "$( print_mount_status ) mounted"

	printf "\n\n\n===  IP + MAC  ===\n\n"
	echo "IPv4  	$( myip4 )" 
	echo "IPv6  	$( myip6 )"
	echo "MAC  	$( first_ethernet_mac )"
	

	printf "\n\n\n===  SERVICES  ===\n\n"
	cd /opt/kiosk/services/ && tail *

	printf "\n\n\n===  LOGS  ===\n\n"
	cd /opt/kiosk/logs && tail *


	printf "\n\n\n===  KIOSKSYSTEM GIT  ===\n\n"
	cd /opt/tmp/kiosksystem && git status


	printf "\n\n"
}


# kioskmount ro|rw

# todo
# /etc/default/grub
# GRUB_RECORDFAIL_TIMEOUT=$GRUB_TIMEOUT
# update-grub
kioskmount(){
	echo "currently $( print_mount_status ) mounted (detected by output of mount)"
	
	if [ "$1" = "ro" ]; then
		#sudo cp /etc/overlayroot.local.conf /etc/overlayroot.local.conf.enabled
		sudo cp -f /etc/overlayroot.local.conf.enabled /etc/overlayroot.local.conf
		echo "ro mounted after reboot"
		kiosklog "kiosk" "ro mounted"
	else
		# TODO 
		# rm -f /etc/overlayroot.local.conf
		sudo /usr/sbin/overlayroot-chroot << EOF
			cp -f /etc/overlayroot.local.conf.disabled /etc/overlayroot.local.conf
EOF

		echo "rw mounted after reboot"
		kiosklog "kiosk" "rw mounted"
	fi

	echo "Press return to reboot now"
	read X
	sudo reboot
}


kiosktest(){
	echo ""


    echo "currently $( print_mount_status ) mounted"

	# FIXME
	# check screensaver
	xset q

	# check energy save option
	#xset q

	# check disabled updates

	# check disabled notifications
	notify-send "This should be invisible"

	# check permissions?

	# check rc.local
	#sudo /etc/init.d/rc.local start
}


kioskdir(){
	cd /opt/tmp/kiosksystem/
}

kioskhelp(){
	less /opt/tmp/kiosksystem/Commands.md
}

kiosklogsclear(){
	truncate -s 0 /opt/kiosk/logs/*log
}

logout(){
	mate-session-save --logout-dialog
}

autologinas(){
	if [ "$1" = "kiosk" ]; then
		USER="kiosk"
	else
		USER="user"
	fi

	sudo bash -c 'cat > /etc/lightdm/lightdm.conf.d/50-kiosk.conf' << EOF
[Seat:*]
autologin-user=$USER
autologin-user-timeout=0
EOF
	

	sudo bash -c 'cat > /etc/lightdm/lightdm.conf' << EOF
[Seat:*]
autologin-guest=false
autologin-user=$USER
autologin-user-timeout=0
EOF

# cat <<EOF > print.sh
# #!/bin/bash
# echo \$PWD
# echo $PWD
# EOF



	cat /etc/lightdm/lightdm.conf.d/50-kiosk.conf

}

startvnc(){
	x11vnc -display :0 -noxrecord -noxfixes -noxdamage -forever -passwd 123456
}





print_mount_status(){
	#(mount | grep -q 'overlayroot') && echo "ro" || "rw"

	if (mount | grep -q 'overlayroot') then
    	echo "ro"
	else
		echo "rw"
	fi

}

defaultroute_dev(){
	ip route list exact '0.0.0.0/0' | cut -d' ' -f5
}

myip4(){
	set -- $( ip address show dev "$(defaultroute_dev)" | fgrep 'inet ' | head -n1 )
	echo ${2:-no_ipV4}
}

myip6(){
	set -- $( ip address show dev "$(defaultroute_dev)" | fgrep 'inet6 ' | head -n1 )
	echo ${2:-no_ipV6}
}

first_ethernet_mac(){
	ip --oneline link show |
	 fgrep '<BROADCAST,MULTICAST,UP,LOWER_UP' |
	  sed 's|.*link/ether \(.*\) brd.*|\1|'
}





